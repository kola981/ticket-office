plugins {
    id 'application'
    id 'java'
    id 'jacoco'
}

sourceCompatibility=11
targetCompatibility=11

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter:2.6.1'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.1'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.6.1'
    implementation 'org.xhtmlrenderer:flying-saucer-pdf-itext5:9.1.22'
    implementation 'com.thoughtworks.xstream:xstream:1.4.18'
    implementation 'org.springframework:spring-oxm:5.3.14'
    // implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.1'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.6.1'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.1'
    testImplementation('org.mockito:mockito-inline:4.1.0')
}

tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.withType(Test).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.withType(JavaExec).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/lab/model/*",
                    "org/lab/repository/*",
                    "org/lab/App.*",
            ])
        }))
    }
}

build {
    dependsOn('test')
}

tasks.register("buildBackend", Task) {
    dependsOn('test')
    dependsOn('build')
    dependsOn('run')
    tasks.findByName('build').mustRunAfter('test')
    tasks.findByName('run').mustRunAfter('build')
}

application {
    mainClass = 'org.kolesnyk.App'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClassName
    }
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}